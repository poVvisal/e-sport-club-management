name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies for API Gateway
      run: npm ci
      working-directory: ./APIGateway_Microservice
      
    - name: Install dependencies for Registration & Auth Service
      run: npm ci
      working-directory: ./Registration_Auth_Microservice
      
    - name: Install dependencies for Coach Service
      run: npm ci
      working-directory: ./Coach_Microservice
      
    - name: Install dependencies for Player Service
      run: npm ci
      working-directory: ./Player_Microservice
      
    - name: Create environment files
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > ./APIGateway_Microservice/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ./APIGateway_Microservice/.env
        echo "PORT=4000" >> ./APIGateway_Microservice/.env
        
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > ./Registration_Auth_Microservice/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ./Registration_Auth_Microservice/.env
        echo "PORT=5001" >> ./Registration_Auth_Microservice/.env
        
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > ./Coach_Microservice/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ./Coach_Microservice/.env
        echo "PORT=5002" >> ./Coach_Microservice/.env
        
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > ./Player_Microservice/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ./Player_Microservice/.env
        echo "PORT=5003" >> ./Player_Microservice/.env
        
    - name: Run tests for API Gateway
      run: npm test --if-present
      working-directory: ./APIGateway_Microservice
      
    - name: Run tests for Registration & Auth Service
      run: npm test --if-present
      working-directory: ./Registration_Auth_Microservice
      
    - name: Run tests for Coach Service
      run: npm test --if-present
      working-directory: ./Coach_Microservice
      
    - name: Run tests for Player Service
      run: npm test --if-present
      working-directory: ./Player_Microservice
      
    - name: Build application
      run: |
        echo "Building microservices application..."
        # Add any build steps if needed
        
    - name: Create deployment artifact
      run: |
        mkdir -p dist
        cp -r APIGateway_Microservice dist/
        cp -r Registration_Auth_Microservice dist/
        cp -r Coach_Microservice dist/
        cp -r Player_Microservice dist/
        cp ecosystem.config.js dist/
        cp docker-compose.yml dist/
        cp package*.json dist/ 2>/dev/null || true
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: esports-microservices-${{ matrix.node-version }}
        path: dist/
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and test Docker images
      run: |
        # Build all microservices
        docker-compose build
        
        # Test if containers can start
        docker-compose up -d
        sleep 30
        
        # Check if services are running
        docker-compose ps
        
        # Stop containers
        docker-compose down
        
    - name: Push Docker images
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Tag and push images
        docker tag esport-api-gateway:latest ${{ secrets.DOCKER_USERNAME }}/esport-api-gateway:latest
        docker tag esport-auth-service:latest ${{ secrets.DOCKER_USERNAME }}/esport-auth-service:latest
        docker tag esport-coach-service:latest ${{ secrets.DOCKER_USERNAME }}/esport-coach-service:latest
        docker tag esport-player-service:latest ${{ secrets.DOCKER_USERNAME }}/esport-player-service:latest
        
        docker push ${{ secrets.DOCKER_USERNAME }}/esport-api-gateway:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/esport-auth-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/esport-coach-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/esport-player-service:latest

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        cd APIGateway_Microservice && npm audit --audit-level=moderate
        cd ../Registration_Auth_Microservice && npm audit --audit-level=moderate
        cd ../Coach_Microservice && npm audit --audit-level=moderate
        cd ../Player_Microservice && npm audit --audit-level=moderate
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: esports-microservices-20.x
        path: ./deployment
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        # Example: SSH to server and deploy
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: esports-microservices-20.x
        path: ./deployment
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands
        
    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'ðŸš€ Successfully deployed E-Sports Management System to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}